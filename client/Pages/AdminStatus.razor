@page "/adminstatus"

@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using System.Text.Json
@using BaseLibrary.Entities

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3 class="form-title">Status Anggota</h3>

@if (member != null)
{
    <div class="card">
        <div class="card-header">
            <strong>Status Anggota:</strong>
            <span class="@(member.Status == "Active" ? "status-active" : "status-inactive")">
                @(member.Status)
            </span>
        </div>
        <div class="card-body">
            <p><strong>No Anggota:</strong> @member.MemberID></p>
            <p><strong>NIK:</strong> @member.CitizenID</p>
            <p><strong>No. Telp:</strong> @member.MobilePhone</p>
            <p><strong>Email:</strong> @member.Email</p>
        </div>
    </div>

    <h4>Riwayat Transaksi:</h4>
    @if (member.TransactionHistories != null && member.TransactionHistories.Any())
    {
        <ul class="transaction-list">
            @foreach (var transaksi in member.TransactionHistories)
            {
                <li>
                    <strong>Waktu:</strong> @transaksi.DateTime.ToString("dd/MM/yyyy HH:mm") <br />
                    <strong>Deskripsi:</strong> @transaksi.Description
                </li>
            }
        </ul>
    }
    else
    {
        <li>Tidak ada transaksi.</li>
    }

    <div class="button-container">
        <button class="btn-home" @onclick="GoBack">Kembali</button>
        <button class="btn-home" @onclick="GoToEditTransaction">Tambah Riwayat</button>
    </div>
}
else if (!isUserLoggedIn)
{
    <WarningModal @ref="warningModal" />
}
else
{
    <div class="error-message">
        <p>Nomor Anggota tidak ditemukan.</p>
    </div>
    <button class="btn-home" @onclick="GoBack">Kembali</button>
}

<WarningModal @ref="warningModal" />

@if (showAddTransactionModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h3>Tambah Riwayat Transaksi</h3>
            <EditForm Model="member" OnValidSubmit="SaveTransaction">
                <label>Nomor Anggota:</label>
                <InputText @bind-Value="member.MemberID" />

                <label>Status:</label>
                <InputSelect @bind-Value="status">
                    <option value="Disetujui">Disetujui</option>
                    <option value="Telat">Telat</option>
                    <option value="Ditolak">Ditolak</option>
                    <option value="Selesai">Selesai</option>
                </InputSelect>

                <label>Tanggal:</label>
                <InputDate @bind-Value="date" />
                <label>Deskripsi:</label>
                <InputText @bind-Value="description" />

                <div class="modal-buttons">
                    <button class="btn-save" type="submit">Simpan</button>
                    <button class="btn-cancel" type="button" @onclick="CloseAddTransactionModal">Batal</button>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .card-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .card-body p {
        margin: 5px 0;
    }

    .status-active {
        color: green;
        font-weight: bold;
    }

    .status-inactive {
        color: red;
        font-weight: bold;
    }

    .transaction-list {
        list-style-type: none;
        padding: 0;
    }

        .transaction-list li {
            background: #f9f9f9;
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 5px;
            border-left: 5px solid #007bff;
        }

    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }

    .btn-home {
        display: block;
        width: 100%;
        max-width: 200px;
        padding: 10px;
        background: linear-gradient(90deg, #28a745, #218838);
        ;
        color: white;
        border: none;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
        cursor: pointer;
        margin: 20px auto;
    }

        .btn-home:hover {
            background: linear-gradient(90deg, #218838, #1e7e34);
            transform: scale(1.05)
        }

    .button-container {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .btn-add {
        background: linear-gradient(90deg, #007bff, #0056b3);
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px;
        cursor: pointer;
    }

        .btn-add:hover {
            background: linear-gradient(90deg, #0056b3, #004494);
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-buttons {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
</style>

@code {
    private Customer? member;
    private WarningModal? warningModal;
    private bool isUserLoggedIn = true;
    private bool showAddTransactionModal = false;
    private string description;
    private string status;
    private DateTime date;
    private List<LoanTransaction> loanTransactions = new();
    private LoanTransaction selectedTransaction = new();
    private LoanTransaction updatedTransaction = new();
    private string selectedLoanID = "";

    private void GoToEditTransaction()
    {
        if (member != null)
        {
            Navigation.NavigateTo($"/updatestatus/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await LocalStorage.GetItemAsStringAsync("currentUser");
        if (string.IsNullOrEmpty(currentUser))
        {
            await ShowLoginWarning();
            return;
        }
        // Ambil data Customer dari LocalStorage
        var customerJson = await LocalStorage.GetItemAsStringAsync("currentCustomer");
        if (!string.IsNullOrEmpty(customerJson))
        {
            member = JsonSerializer.Deserialize<Customer>(customerJson);
        }

        if (member == null) return;

        // Ambil semua LoanTransaction yang sesuai dengan MemberID
        var allKeys = await LocalStorage.KeysAsync();
        foreach (var key in allKeys)
        {
            var loanJson = await LocalStorage.GetItemAsStringAsync(key);
            if (!string.IsNullOrEmpty(loanJson))
            {
                var loan = JsonSerializer.Deserialize<LoanTransaction>(loanJson);

                // Simpan hanya transaksi yang sesuai dengan MemberID Customer
                if (member.MemberID == "")
                {
                    if (loan?.MemberID == member.CitizenID)
                    {
                        loanTransactions.Add(loan);
                        break;
                    }
                    else if (loan?.MemberID == member.MemberID)
                    {
                        loanTransactions.Add(loan);
                        break;
                    }
                }

            }
        }
    }


    private async Task ShowLoginWarning()
    {
        await Task.Delay(500);
        warningModal?.Show("Anda belum login, silakan login terlebih dahulu.", "images/exclamation-mark.png");
        await Task.Delay(500);
        Navigation.NavigateTo("/");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ShowAddTransactionModal()
    {
        showAddTransactionModal = true;
        date = DateTime.Today;
        StateHasChanged();
    }

    private void OnLoanIDChange(ChangeEventArgs e)
    {
        selectedLoanID = e.Value.ToString();
        var transaction = loanTransactions.FirstOrDefault(l => l.LoanID == selectedLoanID);

        if (transaction != null)
        {
            selectedTransaction = new LoanTransaction
                {
                    LoanID = transaction.LoanID,
                    MemberID = transaction.MemberID,
                    LoanStatus = transaction.LoanStatus,  // Pastikan status awal dimuat
                    LoanPurpose = transaction.LoanPurpose,
                    LoanAmount = transaction.LoanAmount,
                    LoanTenor = transaction.LoanTenor
                };
        }
        else
        {
            selectedTransaction = new LoanTransaction();
        }
    }

    private void CloseAddTransactionModal()
    {
        showAddTransactionModal = false;
        selectedLoanID = "";
        selectedTransaction = new LoanTransaction();
    }

    private async Task SaveTransaction()
    {
        if (member == null || selectedTransaction == null) return;

        // Pastikan TransactionHistories tidak null sebelum menambahkan transaksi baru
        if (member.TransactionHistories == null)
        {
            member.TransactionHistories = new List<TransactionHistory>();
        }

        // Tambahkan transaksi baru ke daftar TransactionHistories di Customer
        member.TransactionHistories.Add(new TransactionHistory
            {
                DateTime = date,
                Description = description
            });

        // Perbarui status LoanTransaction
        updatedTransaction = new LoanTransaction
            {
                LoanID = selectedTransaction.LoanID,
                MemberID = member.MemberID,
                LoanStatus = status,  // Pastikan status awal dimuat
                LoanPurpose = selectedTransaction.LoanPurpose,
                LoanAmount = selectedTransaction.LoanAmount,
                LoanTenor = selectedTransaction.LoanTenor
            };

        // Simpan Customer yang telah diperbarui ke LocalStorage
        await LocalStorage.SetItemAsync("currentCustomer", JsonSerializer.Serialize(member));

        // Simpan LoanTransaction yang telah diperbarui ke LocalStorage
        await LocalStorage.SetItemAsync(updatedTransaction.LoanID, JsonSerializer.Serialize(updatedTransaction));

        showAddTransactionModal = false;
    }

}
