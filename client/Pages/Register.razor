@page "/register"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using BaseLibrary.Entities
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" class="form-container">
    <h3 class="form-title">Form Pendaftaran</h3>

    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label>Upload Gambar KTP:</label>
        <InputFile OnChange="HandleFileUpload" class="form-control" />
    </div>

    <div class="form-group">
        <label>KTP:</label>
        <InputText @bind-Value="user.CitizenID" class="form-control" />
        <ValidationMessage For="() => user.CitizenID" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Nama:</label>
        <InputText @bind-Value="user.Name" class="form-control" />
        <ValidationMessage For="() => user.Name" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="user.Email" class="form-control" type="email" />
        <ValidationMessage For="() => user.Email" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Alamat KTP:</label>
        <InputText @bind-Value="user.AddressID" class="form-control" />
        <ValidationMessage For="() => user.AddressID" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Alamat Domisili:</label>
        <InputText @bind-Value="user.AddressDomicili" class="form-control" />
        <ValidationMessage For="() => user.AddressDomicili" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Nama Ibu Kandung:</label>
        <InputText @bind-Value="user.MaindenName" class="form-control" />
        <ValidationMessage For="() => user.MaindenName" class="text-danger" />
    </div>

    <div class="form-group">
        <label>Nomor HP:</label>
        <InputText @bind-Value="user.MobilePhone" class="form-control" />
        <ValidationMessage For="() => user.MobilePhone" class="text-danger" />
    </div>
    <div class="form-group">
        <label>Nomor Darurat:</label>
        <InputText @bind-Value="user.EmergencyPhone" class="form-control" />
        <ValidationMessage For="() => user.EmergencyPhone" class="text-danger" />
    </div>

    <div class="button-container">
        <button type="submit" class="btn btn-submit">Daftar</button>
    </div>
</EditForm>


<!-- Warning Modal -->
<WarningModal @ref="warningModal" />

<style>
    .form-container {
        max-width: 450px;
        margin: 20px auto;
        padding: 25px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.15);
    }

    .form-title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: 600;
            margin-bottom: 5px;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 14px;
    }

    .text-danger {
        font-size: 12px;
        color: red;
        margin-top: 5px;
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-submit {
        width: 100%;
        padding: 12px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        background: linear-gradient(90deg, #28a745, #218838);
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

        .btn-submit:hover {
            background: linear-gradient(90deg, #218838, #1e7e34);
            transform: scale(1.05);
            box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.25);
        }
</style>

@code {
    private Customer user = new();
    private WarningModal? warningModal;
    private async Task HandleValidSubmit()
    {
        // Set Status ke Active
        user.Status = "Active";

        // Tambahkan Transaction History saat pendaftaran
        user.TransactionHistories.Add(new TransactionHistory
            {
                DateTime = DateTime.Now,
                Description = "Pendaftaran berhasil"
            });

        await LocalStorage.SetItemAsync(user.CitizenID, user);
        Console.WriteLine("Data berhasil disimpan ke LocalStorage");
        await Task.Delay(2000);
        // Tampilkan modal setelah berhasil mendaftar
        warningModal.Show("Pendaftaran berhasil!", "images/circle.png");
        // Tunggu sebentar sebelum redirect (biar user sempat lihat pesan sukses)
        await Task.Delay(3000);

        // Redirect ke halaman Home
        Navigation.NavigateTo("/");
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        // Jika validasi gagal, tampilkan modal peringatan
        warningModal.Show("Harap isi semua bidang yang diperlukan!", "images/forbidden.png");
    }

    private async void HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            user.CitizenImage = Convert.ToBase64String(ms.ToArray());
            Console.WriteLine($"File uploaded: {file.Name}");
        }
    }
}
