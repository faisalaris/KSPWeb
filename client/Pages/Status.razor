@page "/status"

@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using System.Text.Json
@using BaseLibrary.Entities

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3 class="form-title">Status Anggota</h3>

@if (member != null)
{
    <div class="card">
        <div class="card-header">
            <strong>Status Anggota:</strong>
            <span class="@(member.Status == "Active" ? "status-active" : "status-inactive")">
                @(member.Status)
            </span>
        </div>
        <div class="card-body">
            <p><strong>No Anggota:</strong> @member.CitizenID</p>
            <p><strong>NIK:</strong> @member.CitizenID</p>
            <p><strong>No. Telp:</strong> @member.MobilePhone</p>
            <p><strong>Email:</strong> @member.Email</p>
        </div>
    </div>

    <h4>Riwayat Transaksi:</h4>
    @if (member.TransactionHistories != null && member.TransactionHistories.Any())
    {
        <ul class="transaction-list">

            @foreach (var transaksi in member.TransactionHistories)
            {
                <li>
                    <strong>Waktu:</strong> @transaksi.DateTime.ToString("dd/MM/yyyy HH:mm") <br />
                    <strong>Deskripsi:</strong> @transaksi.Description
                </li>
            }
        </ul>
    }
    else
    {
        <li>Tidak ada transaksi.</li>
    }

    <button class="btn-home" @onclick="GoBack">Kembali</button>
}
else
{
    <div class="error-message">
        <p>Nomor Anggota tidak ditemukan.</p>
    </div>
    <button class="btn-home" @onclick="GoBack">Kembali</button>
}

<WarningModal @ref="warningModal" />

<style>
    .card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .card-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .card-body p {
        margin: 5px 0;
    }

    .status-active {
        color: green;
        font-weight: bold;
    }

    .status-inactive {
        color: red;
        font-weight: bold;
    }

    .transaction-list {
        list-style-type: none;
        padding: 0;
    }

        .transaction-list li {
            background: #f9f9f9;
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 5px;
            border-left: 5px solid #007bff;
        }

    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }

    .btn-home {
        display: block;
        width: 100%;
        max-width: 200px;
        padding: 10px;
        background: linear-gradient(90deg, #28a745, #218838);
        ;
        color: white;
        border: none;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
        cursor: pointer;
        margin: 20px auto;
    }

        .btn-home:hover {
            background: linear-gradient(90deg, #218838, #1e7e34);
            transform: scale(1.05)
        }
</style>

@code {
    private Customer? member;
    private WarningModal? warningModal;

    protected override async Task OnInitializedAsync()
    {
        var customerJson = await LocalStorage.GetItemAsStringAsync("currentCustomer");

        if (!string.IsNullOrEmpty(customerJson))
        {
            member = JsonSerializer.Deserialize<Customer>(customerJson);
        }

        if (member == null)
        {
            warningModal?.Show("Nomor anggota tidak ditemukan!");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
