@page "/status"

@using Microsoft.AspNetCore.Components
@using Blazored.LocalStorage
@using System.Text.Json
@using BaseLibrary.Entities

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3 class="form-title">Status Anggota</h3>

@if (member != null)
{
    <div class="card">
        <div class="card-header">
            <strong>Status Anggota:</strong>
            <span class="@(customerData.FirstOrDefault(d => d["caption"] == "Status")?["value"] == "Aktif" ? "status-active" : "status-inactive")">
                @(customerData.FirstOrDefault(d => d["caption"] == "Status")?["value"])
            </span>
        </div>
        <div class="card-body">
            @foreach (var item in customerData.Where(i => i["caption"] != "Status"))
            {
                <p><strong>@item["caption"]:</strong> @item["value"]</p>
            }
        </div>
    </div>

    <h4>Riwayat Transaksi:</h4>
    @if (transactionData.Any())
    {
        var groupedTransactions = transactionData
            .GroupBy(t => t["lineno"])
            .OrderBy(g => g.Key);

        <ul class="transaction-list">
            @foreach (var group in groupedTransactions)
            {
                <li>
                    <strong>Transaksi Pinjaman No @group.FirstOrDefault(i => i["caption"] == "Nomor Pinjaman")?["value"]:</strong>

                    @foreach (var transaksi in group.Where(i => i["caption"] != "Nomor Pinjaman"))
                        {
                            <li><strong>@transaksi["caption"]:</strong> @transaksi["value"]</li>
                        }

                </li>
            }
        </ul>
    }
    else
    {
        <p>Tidak ada transaksi.</p>
    }

    <button class="btn-home" @onclick="GoBack">Kembali</button>
}
else
{
    <div class="error-message">
        <p>Nomor Anggota tidak ditemukan.</p>
    </div>
    <button class="btn-home" @onclick="GoBack">Kembali</button>
}

<WarningModal @ref="warningModal" />

<style>
    .card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .card-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .card-body p {
        margin: 5px 0;
    }

    .status-active {
        color: green;
        font-weight: bold;
    }

    .status-inactive {
        color: red;
        font-weight: bold;
    }

    .transaction-list {
        list-style-type: none;
        padding: 0;
    }

        .transaction-list li {
            background: #f9f9f9;
            padding: 8px;
            margin-bottom: 5px;
            border-radius: 5px;
            border-left: 6px solid #037803;
        }

    .error-message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }

    .btn-home {
        display: block;
        width: 100%;
        max-width: 200px;
        padding: 10px;
        background: linear-gradient(90deg, #037803, #218838);
        ;
        color: white;
        border: none;
        border-radius: 5px;
        text-align: center;
        font-weight: bold;
        cursor: pointer;
        margin: 20px auto;
    }

        .btn-home:hover {
            background: linear-gradient(90deg, #FEBD0F, #F9DD7A);
            transform: scale(1.05)
        }
</style>

@code {
    private List<Dictionary<string, string>> customerData = new();
    private List<Dictionary<string, string>> transactionData = new();
    private Customer? member;
    private WarningModal? warningModal;

    protected override async Task OnInitializedAsync()
    {
        var customerJson = await LocalStorage.GetItemAsStringAsync("currentCustomer");
        var apiJson = await LocalStorage.GetItemAsStringAsync("ApiCustomer");

        if (!string.IsNullOrEmpty(apiJson))
        {



            var data = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(apiJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (data != null)
            {
                customerData = data.Where(d => d["groupname"] == "Customer").ToList();
                transactionData = data.Where(d => d["groupname"] == "Transaction").ToList();
            }
         

        }
        
  

        if (!string.IsNullOrEmpty(customerJson))
        {
            member = JsonSerializer.Deserialize<Customer>(customerJson);

            await LocalStorage.RemoveItemAsync("currentCustomer");
            await LocalStorage.RemoveItemAsync("ApiCustomer");
        }


    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
