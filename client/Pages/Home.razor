@page "/"

@using System.ComponentModel.DataAnnotations
@using BaseLibrary.Entities
@using System.Text.Json

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime 
@inject Services.CustomerService CustomerService


<PageTitle>KSP</PageTitle>

<div class="container text-center mt-5">
    <h1 class="fw-bold">Selamat Datang!!</h1>
    <p class="fs-5">Di Koperasi Syariah Pembangunan.</p>
    <p class="text-muted">
        Website ini memungkinkan Anda untuk mengajukan pinjaman dengan mudah serta
        memantau status pinjaman Anda secara real-time di koperasi syariah. Dapatkan layanan
        finansial yang transparan, aman, dan sesuai dengan prinsip syariah.
    </p>
    
    <!--- <button class="btn btn-success btn-lg px-4 py-2 mt-3" @onclick="GoToRegister">
        Daftar dan Ajukan Pinjaman 
    </button> -->

    <div class="mt-4">
        <h5>Cek Status Pinjaman</h5>
        <p class="text-muted">Masukkan nomor anggota atau NIK Anda untuk mengecek status pinjaman.</p>
    </div>

    <div class="d-flex justify-content-center">
        <div class="card shadow-sm p-4 mt-4" style="max-width: 500px; width: 100%;">
            <h5 class="text-center mb-3">Cek Status Pinjaman</h5>

            <div class="form-group">
                <label class="fw-bold">Nomor Anggota:</label>
                <InputText @bind-Value="loanApplication.NomorAnggota" class="form-control border rounded shadow-sm p-2 input-highlight" />
            </div>

            <div class="form-group mt-3">
                <label class="fw-bold">Nomor Induk KTP:</label>
                <InputText @bind-Value="loanApplication.NomorIndukKTP" class="form-control border rounded shadow-sm p-2 input-highlight" />
            </div>

            <div class="text-center mt-4">
                <button type="submit" class="btn btn-submit px-4 py-2 fw-bold shadow" @onclick="GoToStatus">Periksa Status</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Peringatan -->
<WarningModal @ref="warningModal" @bind-Message="warningMessage" OnClose="RestoreLoanModal" />

<WarningModal @ref="statusModal" @bind-Message="warningMessage" />

<!-- Modal Form Ajukan Pinjaman -->
@if (isLoanModalOpen)
{
    <div class="modal-overlay" @onclick="CloseLoanModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <button class="close-btn" @onclick="CloseLoanModal">&times;</button>
            <h3 class="form-title">Ajukan Pinjaman</h3>



                <div class="form-group">
                    <label>Nomor Anggota:</label>
                    <InputText @bind-Value="loanApplication.NomorAnggota" class="form-control" />
                    <!--<validationmessage for="() => loanapplication.nomoranggota" class="text-danger" /> -->
                </div>

                <div class="form-group">
                    <label>Nomor Induk KTP:</label>
                    <InputText @bind-Value="loanApplication.NomorIndukKTP" class="form-control" />
                    <!--<ValidationMessage For="() => loanApplication.NomorIndukKTP" class="text-danger" />-->
                </div>
                <div class="button-container">
                    <button type="button" class="btn btn-submit-modal" @onclick="GoToRegisterLoan">Ajukan Pinjaman</button>
                </div>

                <p>Belum jadi Anggota? Daftarkan diri anda segera ajukan Pinjaman</p>
                <button class="btn-action btn-daftar" @onclick="GoToRegister">Pendaftaran</button>

                
        </div>
    </div>
}


<style>
    /* Tombol Aksi */

    .banner {
        width: 80%;
        height: 150px;
        background: url('/images/koperasibanner.png') no-repeat center center;
        background-size: cover;
        padding: 2px;
    }

    .btn-group {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 15px;
    }

    .btn-action {
        padding: 12px 20px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 30px;
        border: none;
        cursor: pointer;
        transition: 0.3s ease-in-out;
    }

    .btn-daftar {
        background: linear-gradient(90deg, #037803, #218838);
        color: white;
    }

        .btn-daftar:hover {
            background: linear-gradient(90deg, #FEBD0F, #F9DD7A);
            transform: scale(1.05);
        }

    .btn-pinjaman {
        background: linear-gradient(90deg, #037803, #218838);
        color: white;
    }

        .btn-pinjaman:hover {
            background: linear-gradient(90deg, #FEBD0F, #F9DD7A);
            transform: scale(1.05);
        }

    /* Modal */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-content {
        background: white;
        padding: 25px;
        border-radius: 10px;
        width: 100%;
        max-width: 500px;
        max-height: 80vh; /* Batasi tinggi modal */
        overflow-y: auto; /* Tambahkan scroll jika konten terlalu panjang */
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3);
        position: relative;
    }

    .close-btn {
        position: absolute;
        right: 20px;
        top: 10px;
        font-size: 24px;
        background: none;
        border: none;
        cursor: pointer;
    }

    /* Form */
    .form-container {
        max-width: 450px;
        margin: 0 auto;
    }

    .form-title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: 600;
            margin-bottom: 5px;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 14px;
    }

    .text-danger {
        font-size: 12px;
        color: red;
        margin-top: 5px;
    }

    .button-container {
        display: flex;
        justify-content: space-between; /* Memberikan jarak antar tombol */
        gap: 15px; /* Menambahkan jarak ekstra antar tombol */
        margin-top: 20px;
    }

    .btn-submit-modal {
        flex: 1; /* Membuat kedua tombol memiliki ukuran fleksibel */
        max-width: 48%; /* Batas maksimum lebar tiap tombol */
        padding: 12px;
        font-size: 14px;
        font-weight: bold;
        color: white;
        background: linear-gradient(90deg, #037803, #218838);
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

        .btn-submit-modal:hover {
            background: linear-gradient(90deg, #FEBD0F, #F9DD7A);
            transform: scale(1.05);
            box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.25);
        }

    .btn-submit {
        width: 100%;
        padding: 12px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        background: linear-gradient(90deg, #037803, #218838);
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

        .btn-submit:hover {
            background: linear-gradient(90deg, #FEBD0F, #F9DD7A);
            transform: scale(1.05);
            box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.25);
        }


    .status-modal {
        width: 100%;
        max-width: 450px;
        padding: 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }

    .header-container {
        display: flex;
        flex-direction: column;
        align-items: center; /* Membuat semua elemen di tengah */
        margin-top: 20px; /* Memberikan jarak dari atas */
    }

    .logo-container {
        text-align: center;
        margin-bottom: 30px; /* Memberikan jarak antara logo dan teks */
    }

    .logo {
        width: 140px; /* Ukuran logo */
        height: auto;
    }

    .welcome-text {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        margin-top: 10px; /* Jarak antara logo dan teks */
    }

    .description {
        text-align: center;
        font-size: 1.2rem;
    }

    .input-highlight:focus,
    .input-highlight:valid {
        border-color: #037803 !important; /* Warna hijau */
        box-shadow: 0 0 8px rgba(40, 167, 69, 0.5);
        transition: 0.3s ease-in-out;
    }

</style>

@code {
    private string warningMessage = "Nomor anggota tidak boleh kosong!";
    private bool isModalOpen = false;
    private bool isLoanModalOpen = false;
    private bool isWarningModalOpen = false; // Tambahkan ini untuk modal peringatan
    private string? storedNomorAnggota;
    private string? storedNomorIndukKTP;

    protected override async Task OnInitializedAsync()
    {
        var customerJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "customerData");
        if (!string.IsNullOrEmpty(customerJson))
        {
            var customer = JsonSerializer.Deserialize<Customer>(customerJson);
            storedNomorIndukKTP = customer?.CitizenID;
        }
    }


    private void OpenLoanModal()
    {
        isLoanModalOpen = true;
        StateHasChanged(); // Pastikan UI diperbarui
    }
    private void CloseLoanModal()
    {
        isLoanModalOpen = false;
        StateHasChanged(); // Pastikan UI diperbarui
    }

    private string NomorAnggota { get; set; } = string.Empty;
    private WarningModal? warningModal;

    private WarningModal? statusModal;

    private LoanApplicationModel loanApplication = new();

    private void HandleValidSubmit()
    {
        Console.WriteLine("Form submitted successfully");
    }

    private void HandleLoanSubmit()
    {
        Console.WriteLine("Pinjaman berhasil diajukan");
    }

    private void CheckLoanStatus()
    {
        Console.WriteLine("Memeriksa status pinjaman...");
    }


    private void GoToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private async Task GoToStatus()
    {
        if (string.IsNullOrEmpty(loanApplication.NomorAnggota) && string.IsNullOrEmpty(loanApplication.NomorIndukKTP))
        {
            CloseLoanModal();
            statusModal?.Show("Nomor Anggota atau NIK tidak boleh kosong!");
        }
        else
        {
            var currentUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser");
            //var customerJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", loanApplication.NomorIndukKTP);
            var customer = await CustomerService.GetCustomerDataAsync(loanApplication.NomorIndukKTP, loanApplication.NomorAnggota);


                if (customer.CitizenID == null || customer.MemberID == null)
                {
                    CloseLoanModal();
                    statusModal?.Show("Nomor Anggota atau NIK tidak ditemukan.");
                }
                else
                {
                    var customerJson = JsonSerializer.Serialize(customer, new JsonSerializerOptions
                    {
                        WriteIndented = true // Biar JSON lebih rapi
                    });
                    // Simpan seluruh objek Customer ke LocalStorage agar bisa diambil di Status.razor
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "currentCustomer", customerJson);

                    // Cek apakah pengguna adalah admin
                    if (currentUser == "admin")
                    {
                        Navigation.NavigateTo("/adminstatus"); // Jika admin, ke AdminStatus.razor
                    }
                    else
                    {
                        Navigation.NavigateTo("/status"); // Jika bukan, ke Status.razor
                    }
                    return;
                }    
        }
        
    }
    private async Task GoToRegisterLoan()
    {
        if (string.IsNullOrEmpty(loanApplication.NomorAnggota) && string.IsNullOrEmpty(loanApplication.NomorIndukKTP))
        {
            CloseLoanModal();
            warningModal?.Show("Nomor Anggota atau NIK tidak boleh kosong!");
        }
        else
        {
            var customerJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", loanApplication.NomorIndukKTP);
            if (!string.IsNullOrEmpty(customerJson))
            {
                var customer = JsonSerializer.Deserialize<Customer>(customerJson);

                if (customer != null)
                {
                    // Simpan seluruh objek Customer ke LocalStorage agar bisa diambil di Status.razor
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "currentCustomerLoan", customerJson);

                    // Navigasi ke Status.razor
                    Navigation.NavigateTo("/loan");
                    return;
                }
            }
        }
        statusModal?.Show("Nomor Anggota atau NIK tidak ditemukan.");
    }



    private void RestoreLoanModal()
    {
        isLoanModalOpen = true;  // Buka kembali modal pinjaman setelah menutup modal warning
        StateHasChanged();
    }

    public class LoanApplicationModel
    {
        [Required]
        public string NomorAnggota { get; set; } = string.Empty;

        [Required]
        public string NomorIndukKTP { get; set; } = string.Empty;
    }
}
