@page "/loan/"

@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using BaseLibrary.Entities
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

@if (member != null)
{
    <div class="loan-container">
        <h3>Form Pengajuan Pinjaman</h3>

        <EditForm Model="loanTransaction" OnValidSubmit="SubmitLoan">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>Jumlah Pinjaman</label>
                <InputNumber @bind-Value="loanTransaction.LoanAmount" class="input-field" />
                <ValidationMessage For="@(() => loanTransaction.LoanAmount)" />
            </div>

            <div>
                <label>Keperluan</label>
                <InputText @bind-Value="loanTransaction.LoanPurpose" class="input-field" />
                <ValidationMessage For="@(() => loanTransaction.LoanPurpose)" />
            </div>

            <div>
                <label>Tenor (bulan)</label>
                <InputNumber @bind-Value="loanTransaction.LoanTenor" class="input-field" />
                <ValidationMessage For="@(() => loanTransaction.LoanTenor)" />
            </div>

            <button class="btn-submit" type="button" @onclick="SimulateLoan">Simulasi</button>
            <button class="btn-submit" type="submit">Ajukan Pinjaman</button>
        </EditForm>
    </div>
}
else
{
    <WarningModal @ref="warningModal" Message="Nomor anggota tidak ditemukan!" OnClose="GoBack" />
}

<WarningModal @ref="statusModal" @bind-Message="warningMessage" />

<style>
    .loan-container {
        max-width: 400px;
        margin: auto;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }

    .input-field {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-submit {
        width: 100%;
        padding: 12px;
        font-size: 18px;
        font-weight: bold;
        color: white;
        background: linear-gradient(90deg, #28a745, #218838);
        border: none;
        border-radius: 30px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        margin-top: 15px; /* Memberikan jarak antar tombol */
    }

        .btn-submit:first-of-type {
            margin-top: 20px; /* Jarak lebih besar untuk tombol pertama */
        }

        .btn-submit:hover {
            background: linear-gradient(90deg, #218838, #1e7e34);
            transform: scale(1.05);
            box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.25);
        }
</style>

@code {
    private Customer? member;
    private WarningModal? warningModal;
    private LoanTransaction loanTransaction = new();
    private string warningMessage = "Nomor anggota tidak boleh kosong!";
    private bool isModalOpen = false;
    private WarningModal? statusModal;


    protected override async Task OnInitializedAsync()
    {
        var customerJson = await LocalStorage.GetItemAsStringAsync("currentCustomerLoan");

        if (!string.IsNullOrEmpty(customerJson))
        {
            member = JsonSerializer.Deserialize<Customer>(customerJson);
        }

        if (member == null)
        {
            statusModal?.Show("Nomor anggota tidak ditemukan!", "images/exclamation-mark.png");
        }
        else
        {
            // Set MemberID otomatis berdasarkan data anggota yang login
            loanTransaction.MemberID = member.CitizenID;
        }
    }

    private void SimulateLoan()
    {
        if (loanTransaction.LoanAmount <= 0 || loanTransaction.LoanTenor <= 0 || string.IsNullOrWhiteSpace(loanTransaction.LoanPurpose))
        {
            statusModal?.Show("Harap isi semua data dengan benar!", "images/exclamation-mark.png");
        }
        else
        {
            statusModal?.Show($"Simulasi: Pinjaman sebesar Rp {loanTransaction.LoanAmount} dengan tenor {loanTransaction.LoanTenor} bulan.");
        }
    }

    private async Task SubmitLoan()
    {
        if (loanTransaction.LoanAmount <= 0 || loanTransaction.LoanTenor <= 0 || string.IsNullOrWhiteSpace(loanTransaction.LoanPurpose))
        {
            statusModal?.Show("Harap isi semua data dengan benar!", "images/exclamation-mark.png");
            return;
        }

        var customerJson = await LocalStorage.GetItemAsStringAsync("currentCustomerLoan");
        if (string.IsNullOrEmpty(customerJson))
        {
            statusModal?.Show("Data anggota tidak ditemukan!", "images/exclamation-mark.png");
            return;
        }

        var customer = JsonSerializer.Deserialize<Customer>(customerJson);

        customer.TransactionHistories.Add(new TransactionHistory
            {
                DateTime = DateTime.Now,
                Description = $"Pengajuan pinjaman sebesar Rp. {loanTransaction.LoanAmount} untuk {loanTransaction.LoanPurpose} selama {loanTransaction.LoanTenor} bulan."
            });

        await LocalStorage.SetItemAsync(customer.CitizenID, customer);
        await LocalStorage.SetItemAsync(loanTransaction.LoanID, loanTransaction);

        statusModal?.Show("Pengajuan pinjaman berhasil dikirim!", "images/circle.png");
        // Simpan transaksi ke local storage untuk sementara
        
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
